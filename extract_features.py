import pandas as pd
import numpy as np
import glob
import os
from collections import deque

def extract_features_from_window(window_data):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if len(window_data) < 10:  # –ú–∏–Ω–∏–º—É–º 10 –æ–±—Ä–∞–∑—Ü–æ–≤
        return None
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ numpy –º–∞—Å—Å–∏–≤—ã
    accel_data = np.array([[row['accel_x'], row['accel_y'], row['accel_z']] for _, row in window_data.iterrows()])
    gyro_data = np.array([[row['gyro_x'], row['gyro_y'], row['gyro_z']] for _, row in window_data.iterrows()])
    
    features = {}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
    for i, axis in enumerate(['x', 'y', 'z']):
        features[f'accel_{axis}_mean'] = np.mean(accel_data[:, i])
        features[f'accel_{axis}_std'] = np.std(accel_data[:, i])
        features[f'accel_{axis}_max'] = np.max(accel_data[:, i])
        features[f'accel_{axis}_min'] = np.min(accel_data[:, i])
        features[f'accel_{axis}_range'] = features[f'accel_{axis}_max'] - features[f'accel_{axis}_min']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –≥–∏—Ä–æ—Å–∫–æ–ø–∞
    for i, axis in enumerate(['x', 'y', 'z']):
        features[f'gyro_{axis}_mean'] = np.mean(gyro_data[:, i])
        features[f'gyro_{axis}_std'] = np.std(gyro_data[:, i])
        features[f'gyro_{axis}_max'] = np.max(gyro_data[:, i])
        features[f'gyro_{axis}_min'] = np.min(gyro_data[:, i])
        features[f'gyro_{axis}_range'] = features[f'gyro_{axis}_max'] - features[f'gyro_{axis}_min']
    
    # –ú–∞–≥–Ω–∏—Ç—É–¥–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è
    accel_magnitude = np.sqrt(np.sum(accel_data**2, axis=1))
    features['accel_magnitude_mean'] = np.mean(accel_magnitude)
    features['accel_magnitude_std'] = np.std(accel_magnitude)
    
    # –ú–∞–≥–Ω–∏—Ç—É–¥–∞ —É–≥–ª–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    gyro_magnitude = np.sqrt(np.sum(gyro_data**2, axis=1))
    features['gyro_magnitude_mean'] = np.mean(gyro_magnitude)
    features['gyro_magnitude_std'] = np.std(gyro_magnitude)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω—É–ª—è
    for i, axis in enumerate(['x', 'y', 'z']):
        if len(accel_data) > 1:
            zero_crossings = np.sum(np.diff(np.sign(accel_data[:, i])) != 0)
            features[f'accel_{axis}_zero_crossings'] = zero_crossings
        else:
            features[f'accel_{axis}_zero_crossings'] = 0
    
    # –≠–Ω–µ—Ä–≥–∏—è —Å–∏–≥–Ω–∞–ª–∞
    features['accel_energy'] = np.sum(accel_magnitude**2)
    features['gyro_energy'] = np.sum(gyro_magnitude**2)
    
    return features

def process_raw_data_files():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    raw_files = glob.glob('dataset/raw_data_*.csv')
    
    if not raw_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ dataset/")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(raw_files)} —Ñ–∞–π–ª–æ–≤ —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    for file in raw_files:
        print(f"   {file}")
    
    all_features = []
    window_size = 50  # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    
    for file_path in raw_files:
        print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {file_path}...")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df = pd.read_csv(file_path)
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
            
            if len(df) < window_size:
                print(f"   ‚ö†Ô∏è  –î–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ({len(df)} < {window_size}), –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–µ–µ –æ–∫–Ω–æ")
                window_size_current = max(10, len(df) // 2)
            else:
                window_size_current = window_size
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            if 'label' in df.columns:
                label = df['label'].iloc[0]
            else:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                filename = os.path.basename(file_path)
                if '_rest_' in filename:
                    label = 'rest'
                elif '_walk_' in filename:
                    label = 'walk'
                elif '_run_' in filename:
                    label = 'run'
                elif '_crazy_' in filename:
                    label = 'crazy'
                else:
                    label = 'unknown'
            
            print(f"   –ú–µ—Ç–∫–∞: {label}")
            
            # –°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            features_count = 0
            step = window_size_current // 4  # –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –æ–∫–æ–Ω –Ω–∞ 75%
            
            for i in range(0, len(df) - window_size_current + 1, step):
                window = df.iloc[i:i + window_size_current]
                features = extract_features_from_window(window)
                
                if features:
                    features['label'] = label
                    all_features.append(features)
                    features_count += 1
            
            print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {features_count} –Ω–∞–±–æ—Ä–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    if not all_features:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
    features_df = pd.DataFrame(all_features)
    
    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –Ω–∞–±–æ—Ä–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features_df)}")
    print("\n   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    print(features_df['label'].value_counts())
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    output_file = 'dataset/features.csv'
    features_df.to_csv(output_file, index=False)
    
    print(f"\n‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    print(f"üìà –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {features_df.shape}")
    print(f"üî§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features_df.columns) - 1}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
    print(f"\nüìã –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:")
    print(features_df.head(3))
    
    return features_df

if __name__ == "__main__":
    print("üöÄ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('dataset'):
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dataset/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        exit(1)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    features_df = process_raw_data_files()
    
    if features_df is not None:
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:")
        print(f"   python3 train_dog_behavior_model.py")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–∏–∑–Ω–∞–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.")