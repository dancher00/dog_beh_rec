import socket
import threading
import json
import time
import numpy as np
import pandas as pd
from datetime import datetime
from collections import deque
import joblib
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
HOST = '0.0.0.0'
PORT = 8080

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
try:
    model = joblib.load('models/best_model.pkl')
    scaler = joblib.load('models/scaler.pkl')
    label_encoder = joblib.load('models/label_encoder.pkl')
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    print(f"   –ö–ª–∞—Å—Å—ã: {label_encoder.classes_}")
    print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {type(model).__name__}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    exit(1)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
WINDOW_SIZE = 50  # –¢–∞–∫–æ–π –∂–µ –∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
DATA_BUFFER = deque(maxlen=WINDOW_SIZE)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
latest_data = None
clients = []
behavior_history = deque(maxlen=20)  # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
behavior_stats = {
    'rest': {'count': 0, 'total_time': 0, 'start_time': None},
    'walk': {'count': 0, 'total_time': 0, 'start_time': None},
    'run': {'count': 0, 'total_time': 0, 'start_time': None},
    'crazy': {'count': 0, 'total_time': 0, 'start_time': None}
}
current_behavior = None
last_behavior_change = datetime.now()

def extract_features_from_window(window_data):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã—Ö (–ò–î–ï–ù–¢–ò–ß–ù–û –æ–±—É—á–µ–Ω–∏—é)"""
    if len(window_data) < WINDOW_SIZE:
        return None
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ—á–Ω–æ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
    data_for_df = []
    for d in window_data:
        row = {
            'accel_x': d['accel']['x'],
            'accel_y': d['accel']['y'], 
            'accel_z': d['accel']['z'],
            'gyro_x': d['gyro']['x'],
            'gyro_y': d['gyro']['y'],
            'gyro_z': d['gyro']['z']
        }
        data_for_df.append(row)
    
    df = pd.DataFrame(data_for_df)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∫–æ–ø–∏—è –∏–∑ extract_features.py)
    accel_data = np.array([[row['accel_x'], row['accel_y'], row['accel_z']] for _, row in df.iterrows()])
    gyro_data = np.array([[row['gyro_x'], row['gyro_y'], row['gyro_z']] for _, row in df.iterrows()])
    
    features = {}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
    for i, axis in enumerate(['x', 'y', 'z']):
        features[f'accel_{axis}_mean'] = np.mean(accel_data[:, i])
        features[f'accel_{axis}_std'] = np.std(accel_data[:, i])
        features[f'accel_{axis}_max'] = np.max(accel_data[:, i])
        features[f'accel_{axis}_min'] = np.min(accel_data[:, i])
        features[f'accel_{axis}_range'] = features[f'accel_{axis}_max'] - features[f'accel_{axis}_min']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –≥–∏—Ä–æ—Å–∫–æ–ø–∞
    for i, axis in enumerate(['x', 'y', 'z']):
        features[f'gyro_{axis}_mean'] = np.mean(gyro_data[:, i])
        features[f'gyro_{axis}_std'] = np.std(gyro_data[:, i])
        features[f'gyro_{axis}_max'] = np.max(gyro_data[:, i])
        features[f'gyro_{axis}_min'] = np.min(gyro_data[:, i])
        features[f'gyro_{axis}_range'] = features[f'gyro_{axis}_max'] - features[f'gyro_{axis}_min']
    
    # –ú–∞–≥–Ω–∏—Ç—É–¥–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è
    accel_magnitude = np.sqrt(np.sum(accel_data**2, axis=1))
    features['accel_magnitude_mean'] = np.mean(accel_magnitude)
    features['accel_magnitude_std'] = np.std(accel_magnitude)
    
    # –ú–∞–≥–Ω–∏—Ç—É–¥–∞ —É–≥–ª–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    gyro_magnitude = np.sqrt(np.sum(gyro_data**2, axis=1))
    features['gyro_magnitude_mean'] = np.mean(gyro_magnitude)
    features['gyro_magnitude_std'] = np.std(gyro_magnitude)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω—É–ª—è
    for i, axis in enumerate(['x', 'y', 'z']):
        if len(accel_data) > 1:
            zero_crossings = np.sum(np.diff(np.sign(accel_data[:, i])) != 0)
            features[f'accel_{axis}_zero_crossings'] = zero_crossings
        else:
            features[f'accel_{axis}_zero_crossings'] = 0
    
    # –≠–Ω–µ—Ä–≥–∏—è —Å–∏–≥–Ω–∞–ª–∞
    features['accel_energy'] = np.sum(accel_magnitude**2)
    features['gyro_energy'] = np.sum(gyro_magnitude**2)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    feature_names = [
        'accel_x_mean', 'accel_x_std', 'accel_x_max', 'accel_x_min', 'accel_x_range',
        'accel_y_mean', 'accel_y_std', 'accel_y_max', 'accel_y_min', 'accel_y_range',
        'accel_z_mean', 'accel_z_std', 'accel_z_max', 'accel_z_min', 'accel_z_range',
        'gyro_x_mean', 'gyro_x_std', 'gyro_x_max', 'gyro_x_min', 'gyro_x_range',
        'gyro_y_mean', 'gyro_y_std', 'gyro_y_max', 'gyro_y_min', 'gyro_y_range',
        'gyro_z_mean', 'gyro_z_std', 'gyro_z_max', 'gyro_z_min', 'gyro_z_range',
        'accel_magnitude_mean', 'accel_magnitude_std',
        'gyro_magnitude_mean', 'gyro_magnitude_std',
        'accel_x_zero_crossings', 'accel_y_zero_crossings', 'accel_z_zero_crossings',
        'accel_energy', 'gyro_energy'
    ]
    
    feature_vector = np.array([features[name] for name in feature_names]).reshape(1, -1)
    return feature_vector

def predict_behavior(features):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features_scaled = scaler.transform(features)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict(features_scaled)[0]
        
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏
        behavior = label_encoder.inverse_transform([prediction])[0]
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π)
        probabilities = None
        try:
            if hasattr(model, 'predict_proba'):
                proba_array = model.predict_proba(features_scaled)[0]
                probabilities = {}
                for i, label in enumerate(label_encoder.classes_):
                    probabilities[label] = float(proba_array[i])
            elif hasattr(model, 'decision_function'):
                # –î–ª—è SVM –±–µ–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                decision_scores = model.decision_function(features_scaled)[0]
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Å—Ç—ã–µ "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
                if len(label_encoder.classes_) == 2:
                    probabilities = {
                        label_encoder.classes_[0]: 1.0 if decision_scores < 0 else 0.0,
                        label_encoder.classes_[1]: 1.0 if decision_scores >= 0 else 0.0
                    }
                else:
                    # –î–ª—è –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–π SVM - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    probabilities = {}
                    for i, label in enumerate(label_encoder.classes_):
                        probabilities[label] = 1.0 if i == prediction else 0.0
        except:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            probabilities = {label: 1.0 if label == behavior else 0.0 
                           for label in label_encoder.classes_}
        
        return behavior, probabilities
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return None, None

def update_behavior_stats(new_behavior):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    global current_behavior, last_behavior_change
    
    now = datetime.now()
    
    if current_behavior != new_behavior:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        if current_behavior and behavior_stats[current_behavior]['start_time']:
            duration = (now - behavior_stats[current_behavior]['start_time']).total_seconds()
            behavior_stats[current_behavior]['total_time'] += duration
            behavior_stats[current_behavior]['start_time'] = None
        
        # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        current_behavior = new_behavior
        behavior_stats[new_behavior]['count'] += 1
        behavior_stats[new_behavior]['start_time'] = now
        last_behavior_change = now

def handle_client(client_socket, address):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    print(f"[–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï] –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {address}")
    clients.append(client_socket)
    
    buffer = ""
    try:
        while True:
            data = client_socket.recv(1024).decode('utf-8')
            if not data:
                break
            
            buffer += data
            
            while '\n' in buffer:
                line, buffer = buffer.split('\n', 1)
                if line.strip():
                    try:
                        json_data = json.loads(line)
                        process_imu_data(json_data, address)
                    except json.JSONDecodeError as e:
                        print(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    
    except ConnectionResetError:
        print(f"[–û–¢–ö–õ–Æ–ß–ï–ù–ò–ï] –ö–ª–∏–µ–Ω—Ç {address} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] {e}")
    
    finally:
        if client_socket in clients:
            clients.remove(client_socket)
        client_socket.close()

def process_imu_data(data, address):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö IMU —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    global latest_data
    latest_data = data
    
    data['server_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
    
    if 'type' in data and data['type'] == 'connection':
        print(f"[–ò–ù–§–û] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {data.get('device', 'Unknown')} –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    DATA_BUFFER.append(data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
    if len(DATA_BUFFER) % 10 == 0:
        print(f"\r[–ë–£–§–ï–†] –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {len(DATA_BUFFER)}/{WINDOW_SIZE}", end='')
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–æ–ª–Ω—ã–π
    if len(DATA_BUFFER) == WINDOW_SIZE:
        features = extract_features_from_window(list(DATA_BUFFER))
        
        if features is not None:
            behavior, probabilities = predict_behavior(features)
            
            if behavior and probabilities:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                update_behavior_stats(behavior)
                behavior_history.append(behavior)
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≤–µ–¥–µ–Ω–∏–π
                behavior_emoji = {
                    'rest': 'üò¥',
                    'walk': 'üö∂',
                    'run': 'üèÉ',
                    'crazy': 'üåÄ'
                }
                
                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                print(f"\n" + "="*50)
                print(f"[–ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø] {datetime.now().strftime('%H:%M:%S')}")
                print(f"  {behavior_emoji.get(behavior, 'üêï')} –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {behavior.upper()}")
                
                if probabilities and any(p > 0 for p in probabilities.values()):
                    print(f"  üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
                    for b, p in sorted(probabilities.items(), key=lambda x: x[1], reverse=True):
                        if p > 0:
                            bar = '‚ñà' * int(p * 20)
                            emoji = behavior_emoji.get(b, 'üêï')
                            print(f"    {emoji} {b:8s}: {bar:20s} {p:.1%}")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞–º
                result = {
                    'type': 'behavior',
                    'behavior': behavior,
                    'probabilities': probabilities,
                    'timestamp': data['server_time']
                }
                send_to_all_clients(result)
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

def send_to_all_clients(data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    message = json.dumps(data) + '\n'
    for client in clients[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞
        try:
            client.send(message.encode('utf-8'))
        except:
            if client in clients:
                clients.remove(client)

def console_input():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print("\n" + "="*50)
    print("üêï –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ü–û–í–ï–î–ï–ù–ò–Ø –°–û–ë–ê–ö–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    print("="*50)
    print("–ö–æ–º–∞–Ω–¥—ã:")
    print("  status   - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
    print("  stats    - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
    print("  history  - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    print("  reset    - —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("  data     - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ IMU")
    print("  exit     - –≤—ã–π—Ç–∏")
    print("="*50)
    
    while True:
        try:
            cmd = input("\nüêï –ö–æ–º–∞–Ω–¥–∞: ").strip().lower()
            
            if cmd == 'status':
                print(f"\nüìä [–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´]")
                print(f"   –¢–µ–∫—É—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: {current_behavior or '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...'}")
                print(f"   –ë—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(DATA_BUFFER)}/{WINDOW_SIZE}")
                print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
                
                if current_behavior:
                    duration = (datetime.now() - last_behavior_change).total_seconds()
                    print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫")
            
            elif cmd == 'stats':
                print(f"\nüìà [–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–í–ï–î–ï–ù–ò–Ø]")
                total_time = sum(s['total_time'] for s in behavior_stats.values())
                
                behavior_emoji = {'rest': 'üò¥', 'walk': 'üö∂', 'run': 'üèÉ', 'crazy': 'üåÄ'}
                
                for behavior, stats in behavior_stats.items():
                    count = stats['count']
                    time_spent = stats['total_time']
                    
                    # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                    if behavior == current_behavior and stats['start_time']:
                        time_spent += (datetime.now() - stats['start_time']).total_seconds()
                    
                    percent = (time_spent / total_time * 100) if total_time > 0 else 0
                    emoji = behavior_emoji.get(behavior, 'üêï')
                    
                    print(f"\n   {emoji} {behavior.upper()}:")
                    print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑: {count}")
                    print(f"      –û–±—â–µ–µ –≤—Ä–µ–º—è: {time_spent:.1f} —Å–µ–∫ ({percent:.1f}%)")
            
            elif cmd == 'history':
                print(f"\nüìú [–ò–°–¢–û–†–ò–Ø] –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(behavior_history)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
                if behavior_history:
                    print("   " + " ‚Üí ".join(behavior_history))
                else:
                    print("   –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            elif cmd == 'data':
                if latest_data:
                    print(f"\nüì° [–ü–û–°–õ–ï–î–ù–ò–ï –î–ê–ù–ù–´–ï IMU]")
                    if 'accel' in latest_data:
                        acc = latest_data['accel']
                        print(f"   –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä: X={acc['x']:7.3f} Y={acc['y']:7.3f} Z={acc['z']:7.3f}")
                    if 'gyro' in latest_data:
                        gyr = latest_data['gyro']
                        print(f"   –ì–∏—Ä–æ—Å–∫–æ–ø:     X={gyr['x']:7.3f} Y={gyr['y']:7.3f} Z={gyr['z']:7.3f}")
                else:
                    print("‚ùå –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            
            elif cmd == 'reset':
                for stats in behavior_stats.values():
                    stats['count'] = 0
                    stats['total_time'] = 0
                    stats['start_time'] = None
                behavior_history.clear()
                print("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
            
            elif cmd == 'exit':
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                break
            
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            break

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    try:
        server_socket.bind((HOST, PORT))
        server_socket.listen(5)
        print(f"üöÄ [–°–ï–†–í–ï–†] –ó–∞–ø—É—â–µ–Ω –Ω–∞ {HOST}:{PORT}")
        print(f"‚è≥ [–°–ï–†–í–ï–†] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        print(f"ü§ñ [–ú–û–î–ï–õ–¨] –ì–æ—Ç–æ–≤–∞ –∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
        
        console_thread = threading.Thread(target=console_input)
        console_thread.daemon = True
        console_thread.start()
        
        while True:
            client_socket, address = server_socket.accept()
            client_thread = threading.Thread(
                target=handle_client, 
                args=(client_socket, address)
            )
            client_thread.daemon = True
            client_thread.start()
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  [–°–ï–†–í–ï–†] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        server_socket.close()

if __name__ == "__main__":
    main()